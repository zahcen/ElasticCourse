# elasticsearch-values.yaml (corrigé)
---
clusterName: "elasticsearch"
nodeGroup: "master"

replicas: 1
minimumMasterNodes: 1

# Configuration Elasticsearch
esConfig:
  elasticsearch.yml: |
    cluster.name: "elasticsearch"
    network.host: 0.0.0.0
    
    # Configuration sécurité avec certificats PEM
    xpack.security.enabled: true
    xpack.security.transport.ssl.enabled: true
    xpack.security.transport.ssl.verification_mode: certificate
    xpack.security.transport.ssl.client_authentication: required
    xpack.security.transport.ssl.certificate: /usr/share/elasticsearch/config/certs/tls.crt
    xpack.security.transport.ssl.key: /usr/share/elasticsearch/config/certs/tls.key
    xpack.security.transport.ssl.certificate_authorities: /usr/share/elasticsearch/config/certs/ca.crt
    
    xpack.security.http.ssl.enabled: true
    xpack.security.http.ssl.certificate: /usr/share/elasticsearch/config/certs/tls.crt
    xpack.security.http.ssl.key: /usr/share/elasticsearch/config/certs/tls.key
    xpack.security.http.ssl.certificate_authorities: /usr/share/elasticsearch/config/certs/ca.crt
    
    # Configuration cluster (SANS discovery.type: single-node)
    discovery.seed_hosts: []
    cluster.initial_master_nodes: ["elasticsearch-master-0"]

# Utilisation de extraVolumes et extraVolumeMounts
extraVolumes:
  - name: elasticsearch-certs
    secret:
      secretName: elasticsearch-master-certs
      defaultMode: 0644

extraVolumeMounts:
  - name: elasticsearch-certs
    mountPath: /usr/share/elasticsearch/config/certs
    readOnly: true

# Variables d'environnement
extraEnvs:
  - name: ELASTIC_PASSWORD
    valueFrom:
      secretKeyRef:
        name: elasticsearch-master-credentials
        key: password
  - name: ELASTIC_USERNAME
    valueFrom:
      secretKeyRef:
        name: elasticsearch-master-credentials
        key: username

# Ressources
resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
  limits:
    cpu: "1000m"
    memory: "4Gi"

# Volume persistant pour AKS
volumeClaimTemplate:
  accessModes: [ "ReadWriteOnce" ]
  storageClassName: "managed-premium"
  resources:
    requests:
      storage: 10Gi

# Service
service:
  enabled: true
  type: ClusterIP
  httpPort: 9200
  transportPort: 9300

# Protocole HTTPS
protocol: https
httpPort: 9200

# Health checks adaptés pour HTTPS avec certificats auto-signés
readinessProbe:
  exec:
    command:
      - bash
      - -c
      - |
        set -e
        curl -k -u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD} https://127.0.0.1:9200/_cluster/health?local=true
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 5
  successThreshold: 1

livenessProbe:
  exec:
    command:
      - bash
      - -c
      - |
        set -e
        curl -k -u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD} https://127.0.0.1:9200
  initialDelaySeconds: 120
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 5
  successThreshold: 1

# Anti-affinity
antiAffinity: "soft"

# Désactiver la création automatique de certificats Helm
createCert: false

# IMPORTANT: Laisser Helm gérer cluster.initial_master_nodes
# Ne pas surcharger cette configuration
